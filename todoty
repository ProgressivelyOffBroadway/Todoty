#!/usr/bin/env ruby 

#require './styling'
require 'optparse'

file = ""
opts_ = ""
directory = ""
options = {}
display = true;

### Handle flags ###
OptionParser.new do |opts|
  # Banner for the CLI help documentation
  opts.banner = "Usage: todoty [options] [file/directory]"
  # Save the help documentation in a non local variable no matter what
  opts_ = opts
  # Help flag
  opts.on("-h", "--help", "Print available commands") do
    puts opts
    exit 
  end
  # Directory flag
  opts.on("-d", "--directory [DIR]", "Run todoty on directory, defaults to current\n\t\t\t\t     directory unless path is specified" ) do |d|
    options[:directory] = d
  end
  # Explicit file flag
  opts.on("-f FILE", "--file FILE", "Run todoty on a file") do |f|
    options[:file] = f
  end
end.parse!

# If there are no flags check that there is a file specified and then use that
if options.length == 0
  if ARGV.length > 0
    file = ARGV[ 0 ]
  else
    # Otherwise just print the help documentation
    puts opts_
    display = false;
  end
# If the directory flag has been entered we check for a directory path. If the directory
# path is null ( nil in ruby ) then we explore the current directory ( path = * ), otherwise
# add * to the input file path to explore every file in that directory. The reason we're using
# * to represent the files in a directory is we explore them through Dir.glob 
else
  if options[:directory] == nil
    directory = "*"
  else
    directory += "*"
  end
end

### Utilities ###
def message( line )
  # Normalize the start of each line ("Todo:...")
  raw_message = line[ line =~ /todo/i ... line.length ]
  # Separate out the message
  stripped = raw_message[ 4 ... raw_message.length ]
  message = stripped[ stripped =~ /[[:alpha:]]/ ... stripped.length ]
  return message
end

### Outputs the TODOs ###
def output_todo( file, matches )
  # Split the lines into separate array indexes
  lines = matches.lines()
  # Iterate over the lines
  file_len = 12 + file.length
  file_padding_len = 100 - file_len
  file_padding = ""
  if file_padding_len > 0
    file_padding += " " * ( file_padding_len - 1 )
  else
    file_padding_len = ( file_padding_len * -1 ) + 4
    file = file[ 0 ... -file_padding_len ]
    file += "..."
  end
  puts "+--------------------------------------------------------------------------------------------------+"
  puts "|     FILE: #{file}#{file_padding}|"
  puts "+-----------------+--------------+-----------------------------------------------------------------+"
  puts "|     TODO ID     |     LINE     |     MESSAGE                                                     |"
  puts "+-----------------+--------------+-----------------------------------------------------------------+"
  lines.each_with_index do | line, index |
    line_no = line[0]
    message = message( line )
    message.delete!( "\n" )
    message_len = message.length + 40
    padding_len = 100 - message_len
    if padding_len < 0
      excess = ( padding_len * -1 ) + 4
      message = message[ 0 ... -excess ]
      message += "..."
      padding = ""
    else
      padding = " "*( padding_len - 1 )
    end
    puts "|     #{index}           |     #{line_no}        |     #{message}#{padding} |"
    puts "+-----------------+--------------+-----------------------------------------------------------\------+"
  end
end

### Main script ###
matches = ""
# If the directory flag has been specified, pull up all TODOs in the current directory
# or the directory specified by the user
if directory != ""
  Dir.glob( directory ) do |file|
    if file != ""
      if file == "todoty"
        next
      end
      matches = %x{grep --ignore-case -n todo '#{file}'}
    end
    # Split the found matches if there are any
    if display 
      # Logic on matches
      if matches.length != 0
        output_todo( file, matches )
      end
    end
  end
# Otherwise pull up all TODOs on the input file 
else
  file = ARGV[ 0 ]
  if file != ""
    matches = %x{grep --ignore-case -n todo '#{file}'}
  end
  # Split the found matches if there are any
  if display 
    if matches.length == 0
      puts "+--------------------------------------------------------------------------------------------------+"
      puts "| Todoty found nothing. Either you aren't logging tasks or you're all caught up! Congrats?         |"
      puts "+--------------------------------------------------------------------------------------------------+"
    # Logic on matches
    else
      output_todo( file, matches )
    end
  end
end
